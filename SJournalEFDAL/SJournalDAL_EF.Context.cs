//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SJournalEFDAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class SchoolJournalEntities : DbContext
    {
        public SchoolJournalEntities()
            : base("name=SchoolJournalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Admin> Admins { get; set; }
        public DbSet<Grade> Grades { get; set; }
        public DbSet<Lesson> Lessons { get; set; }
        public DbSet<Mark> Marks { get; set; }
        public DbSet<Parent> Parents { get; set; }
        public DbSet<Student> Students { get; set; }
        public DbSet<Subject> Subjects { get; set; }
        public DbSet<Teacher> Teachers { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<attendanceJournal> attendanceJournal { get; set; }
        public DbSet<Group> Groups { get; set; }
        public DbSet<lesson_student> lesson_student { get; set; }
    
        public virtual int getAvgMark(Nullable<int> stud_id, ObjectParameter avg_mark)
        {
            var stud_idParameter = stud_id.HasValue ?
                new ObjectParameter("stud_id", stud_id) :
                new ObjectParameter("stud_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getAvgMark", stud_idParameter, avg_mark);
        }
    
        public virtual int newGroup(string grade_name, string subj_title, string teacher_full_name, Nullable<int> teacher_id, string description)
        {
            var grade_nameParameter = grade_name != null ?
                new ObjectParameter("grade_name", grade_name) :
                new ObjectParameter("grade_name", typeof(string));
    
            var subj_titleParameter = subj_title != null ?
                new ObjectParameter("subj_title", subj_title) :
                new ObjectParameter("subj_title", typeof(string));
    
            var teacher_full_nameParameter = teacher_full_name != null ?
                new ObjectParameter("teacher_full_name", teacher_full_name) :
                new ObjectParameter("teacher_full_name", typeof(string));
    
            var teacher_idParameter = teacher_id.HasValue ?
                new ObjectParameter("teacher_id", teacher_id) :
                new ObjectParameter("teacher_id", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("newGroup", grade_nameParameter, subj_titleParameter, teacher_full_nameParameter, teacher_idParameter, descriptionParameter);
        }
    
        public virtual int placeMark(Nullable<int> lesson_id, Nullable<int> student_id, Nullable<decimal> mark_value, Nullable<bool> is_Present)
        {
            var lesson_idParameter = lesson_id.HasValue ?
                new ObjectParameter("lesson_id", lesson_id) :
                new ObjectParameter("lesson_id", typeof(int));
    
            var student_idParameter = student_id.HasValue ?
                new ObjectParameter("student_id", student_id) :
                new ObjectParameter("student_id", typeof(int));
    
            var mark_valueParameter = mark_value.HasValue ?
                new ObjectParameter("mark_value", mark_value) :
                new ObjectParameter("mark_value", typeof(decimal));
    
            var is_PresentParameter = is_Present.HasValue ?
                new ObjectParameter("is_Present", is_Present) :
                new ObjectParameter("is_Present", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("placeMark", lesson_idParameter, student_idParameter, mark_valueParameter, is_PresentParameter);
        }
    
        public virtual int startNewLesson(string subj_title, string lesson_theme, Nullable<int> number_of_hours, string grade_name, string home_task, Nullable<int> teacher_id, ObjectParameter addedLesson_id)
        {
            var subj_titleParameter = subj_title != null ?
                new ObjectParameter("subj_title", subj_title) :
                new ObjectParameter("subj_title", typeof(string));
    
            var lesson_themeParameter = lesson_theme != null ?
                new ObjectParameter("lesson_theme", lesson_theme) :
                new ObjectParameter("lesson_theme", typeof(string));
    
            var number_of_hoursParameter = number_of_hours.HasValue ?
                new ObjectParameter("number_of_hours", number_of_hours) :
                new ObjectParameter("number_of_hours", typeof(int));
    
            var grade_nameParameter = grade_name != null ?
                new ObjectParameter("grade_name", grade_name) :
                new ObjectParameter("grade_name", typeof(string));
    
            var home_taskParameter = home_task != null ?
                new ObjectParameter("home_task", home_task) :
                new ObjectParameter("home_task", typeof(string));
    
            var teacher_idParameter = teacher_id.HasValue ?
                new ObjectParameter("teacher_id", teacher_id) :
                new ObjectParameter("teacher_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("startNewLesson", subj_titleParameter, lesson_themeParameter, number_of_hoursParameter, grade_nameParameter, home_taskParameter, teacher_idParameter, addedLesson_id);
        }
    
        public virtual int addNewStudent(string fname, string lname, string patronymic, Nullable<System.DateTime> dob, string email, string password, string phone, string grade_name)
        {
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("lname", lname) :
                new ObjectParameter("lname", typeof(string));
    
            var patronymicParameter = patronymic != null ?
                new ObjectParameter("patronymic", patronymic) :
                new ObjectParameter("patronymic", typeof(string));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var grade_nameParameter = grade_name != null ?
                new ObjectParameter("grade_name", grade_name) :
                new ObjectParameter("grade_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addNewStudent", fnameParameter, lnameParameter, patronymicParameter, dobParameter, emailParameter, passwordParameter, phoneParameter, grade_nameParameter);
        }
    }
}
